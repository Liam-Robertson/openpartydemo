com.openparty.app
├── core
├── di
│   └── BudgetModule.kt
├── feature_budget
│   ├── data
│   │   ├── datasource
│   │   │   └── BudgetDataSource.kt
│   │   └── repository
│   │       └── BudgetRepositoryImpl.kt
│   ├── domain
│   │   ├── model
│   │   │   ├── BudgetItem.kt
│   │   │   └── BudgetResponse.kt
│   │   ├── repository
│   │   │   └── BudgetRepository.kt
│   │   └── usecase
│   │       └── GetBudgetDataUseCase.kt
│   └── presentation
│       ├── components
│       │   ├── BudgetPieChart.kt
│       │   └── Legend.kt
│       ├── BudgetContent.kt
│       ├── BudgetScreen.kt
│       ├── BudgetViewModel.kt
│       └── LoadingScreen.kt
├── feature_proposals
│   └── presentation
│       └── ProposalsScreen.kt
├── feature_newsfeed
│   └── presentation
│       └── NewsfeedScreen.kt
├── navigation
│   ├── AppNavHost.kt
│   ├── BottomNavBar.kt
│   └── Screen.kt
├── ui
│   └── theme
│       ├── Color.kt
│       ├── Theme.kt
│       └── Type.kt
├── MainActivity.kt
└── MyApplication.kt

---------------------------------

package com.openparty.app.feature_budget.data.datasource

import android.content.Context
import com.openparty.app.feature_budget.domain.model.BudgetItem
import com.openparty.app.feature_budget.domain.model.BudgetResponse
import dagger.hilt.android.qualifiers.ApplicationContext
import javax.inject.Inject
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import kotlinx.serialization.json.Json

class BudgetDataSource @Inject constructor(
    @ApplicationContext private val context: Context
) {
    private val jsonFormat = Json { ignoreUnknownKeys = true }

    suspend fun fetchBudgetData(): List<BudgetItem> {
        val jsonString = withContext(Dispatchers.IO) {
            context.assets.open("feature_budget/budgetData.json").bufferedReader().use { it.readText() }
        }
        val response = jsonFormat.decodeFromString<BudgetResponse>(jsonString)
        return response.areasOfSpending.map { it.level1 }
    }
}
// File: feature-budget/src/main/java/com/openparty/feature_budget/data/repository/BudgetRepositoryImpl.kt
package com.openparty.app.feature_budget.data.repository

import com.openparty.app.feature_budget.data.datasource.BudgetDataSource
import com.openparty.app.feature_budget.domain.model.BudgetItem
import com.openparty.app.feature_budget.domain.repository.BudgetRepository
import javax.inject.Inject

class BudgetRepositoryImpl @Inject constructor(
    private val dataSource: BudgetDataSource
) : BudgetRepository {
    override suspend fun getBudgetData(): List<BudgetItem> {
        return dataSource.fetchBudgetData()
    }
}
package com.openparty.app.feature_budget.domain.model

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

@Serializable
data class BudgetItem(
    @SerialName("type_of_spending") val typeOfSpending: String,
    val cost: String,
    val summary: String,
    @SerialName("spending_level_2") val subtypesLevel2: List<BudgetItem> = emptyList(),
    @SerialName("spending_level_3") val subtypesLevel3: List<BudgetItem> = emptyList(),
    val groupedItems: List<BudgetItem>? = null
)
// File: feature-budget/src/main/java/com/openparty/feature_budget/domain/model/BudgetResponse.kt
package com.openparty.app.feature_budget.domain.model

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

@Serializable
data class BudgetResponse(
    @SerialName("areas_of_spending") val areasOfSpending: List<SpendingLevel1>
)package com.openparty.app.feature_budget.domain.model

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

@Serializable
data class SpendingLevel1(
    @SerialName("spending_level_1") val level1: BudgetItem
)// File: feature-budget/src/main/java/com/openparty/feature_budget/domain/repository/BudgetRepository.kt
package com.openparty.app.feature_budget.domain.repository

import com.openparty.app.feature_budget.domain.model.BudgetItem

interface BudgetRepository {
    suspend fun getBudgetData(): List<BudgetItem>
}
// File: feature-budget/src/main/java/com/openparty/feature_budget/domain/usecase/GetBudgetDataUseCase.kt
package com.openparty.app.feature_budget.domain.usecase

import com.openparty.app.feature_budget.domain.model.BudgetItem
import com.openparty.app.feature_budget.domain.repository.BudgetRepository
import javax.inject.Inject

class GetBudgetDataUseCase @Inject constructor(
    private val repository: BudgetRepository
) {
    suspend operator fun invoke(): List<BudgetItem> = repository.getBudgetData()
}
// File: feature-budget/src/main/java/com/openparty/feature_budget/presentation/components/Legend.kt
package com.openparty.app.feature_budget.presentation.components

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.background
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.openparty.app.feature_budget.domain.model.BudgetItem
import com.openparty.app.feature_budget.presentation.getColorForItem

@Composable
fun Legend(
    budgetItems: List<BudgetItem>,
    onItemClick: (BudgetItem) -> Unit
) {
    Column {
        budgetItems.forEach { item ->
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable { onItemClick(item) }
                    .padding(8.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(16.dp)
                        .background(color = getColorForItem(item))
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(
                    text = "${item.typeOfSpending} - ${item.cost}",
                    style = MaterialTheme.typography.bodyMedium
                )
            }
        }
    }
}
// File: feature_budget/src/main/java/com/openparty/feature_budget/presentation/BudgetContent.kt
package com.openparty.app.feature_budget.presentation

import androidx.compose.foundation.layout.*
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.openparty.app.feature_budget.domain.model.BudgetItem
import com.openparty.app.feature_budget.presentation.BudgetPieChart
import com.openparty.app.feature_budget.presentation.components.Legend

import androidx.compose.material3.Button

@Composable
fun BudgetContent(budgetItems: List<BudgetItem>) {
    var currentItems by remember(budgetItems) { mutableStateOf(groupSmallBudgetItems(budgetItems)) }
    val navigationStack = remember { mutableStateListOf<List<BudgetItem>>() }

    Column(
        modifier = Modifier.fillMaxSize().padding(16.dp)
    ) {
        Text(
            text = "West Lothian Budget",
            style = MaterialTheme.typography.headlineSmall,
            modifier = Modifier.align(Alignment.Start)
        )

        if (navigationStack.isNotEmpty()) {
            Button(
                onClick = {
                    if (navigationStack.isNotEmpty()) {
                        currentItems = navigationStack.removeLast()
                    }
                },
                modifier = Modifier.padding(vertical = 16.dp)
            ) {
                Text("Back")
            }
        }

        Spacer(modifier = Modifier.height(32.dp))

        Box(
            modifier = Modifier.fillMaxWidth(),
            contentAlignment = Alignment.Center
        ) {
            BudgetPieChart(
                budgetItems = currentItems,
                onItemClick = { selectedItem ->
                    val nextLevelItems = when {
                        selectedItem.subtypesLevel2.isNotEmpty() -> groupSmallBudgetItems(selectedItem.subtypesLevel2)
                        selectedItem.subtypesLevel3.isNotEmpty() -> groupSmallBudgetItems(selectedItem.subtypesLevel3)
                        else -> listOf(selectedItem)
                    }

                    if (nextLevelItems != currentItems) {
                        navigationStack.add(currentItems)
                        currentItems = nextLevelItems
                    }
                }
            )
        }

        Spacer(modifier = Modifier.height(32.dp))

        Legend(
            budgetItems = currentItems,
            onItemClick = { selectedItem ->
                val nextLevelItems = when {
                    selectedItem.subtypesLevel2.isNotEmpty() -> groupSmallBudgetItems(selectedItem.subtypesLevel2)
                    selectedItem.subtypesLevel3.isNotEmpty() -> groupSmallBudgetItems(selectedItem.subtypesLevel3)
                    else -> listOf(selectedItem)
                }

                if (nextLevelItems != currentItems) {
                    navigationStack.add(currentItems)
                    currentItems = nextLevelItems
                }
            }
        )
    }
}

fun groupSmallBudgetItems(budgetItems: List<BudgetItem>): List<BudgetItem> {
    val totalCost = budgetItems.sumOf { parseCost(it.cost) }
    val threshold = totalCost * 0.05

    val (largeItems, smallItems) = budgetItems.partition { parseCost(it.cost) >= threshold }

    return if (smallItems.isNotEmpty()) {
        val miscellaneousCost = smallItems.sumOf { parseCost(it.cost) }
        largeItems + BudgetItem(
            typeOfSpending = "Miscellaneous",
            cost = formatCost(miscellaneousCost),
            summary = "Grouped small items",
            groupedItems = smallItems
        )
    } else {
        budgetItems
    }
}

fun parseCost(costString: String): Double {
    return costString
        .replace("£", "")
        .replace(",", "")
        .replace(" million", "")
        .trim()
        .toDoubleOrNull() ?: 0.0
}

fun formatCost(cost: Double): String {
    return "£${"%.3f".format(cost)} million"
}
// File: feature_budget/src/main/java/com/openparty/feature_budget/presentation/components/BudgetPieChart.kt
package com.openparty.app.feature_budget.presentation.components

import androidx.compose.foundation.layout.size
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import me.bytebeats.views.charts.pie.PieChart
import me.bytebeats.views.charts.pie.PieChartData
import me.bytebeats.views.charts.pie.render.SimpleSliceDrawer
import com.openparty.app.feature_budget.domain.model.BudgetItem
import com.openparty.app.feature_budget.presentation.getColorForItem
import com.openparty.app.feature_budget.presentation.parseCost

@Composable
fun BudgetPieChart(
    budgetItems: List<BudgetItem>,
    onItemClick: (BudgetItem) -> Unit
) {
    val pieSlices = budgetItems.mapNotNull { item ->
        val value = parseCost(item.cost).toFloat()

        PieChartData.Slice(
            value = value,
            color = getColorForItem(item)
        )
    }

    PieChart(
        pieChartData = PieChartData(pieSlices),
        modifier = Modifier.size(200.dp),
        sliceDrawer = SimpleSliceDrawer(sliceThickness = 50f)
    )
}
// File: feature_budget/src/main/java/com/openparty/feature_budget/presentation/BudgetScreen.kt
package com.openparty.app.feature_budget.presentation

import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.hilt.navigation.compose.hiltViewModel

@Composable
fun BudgetScreen(
    viewModel: BudgetViewModel = hiltViewModel()
) {
    val isLoading = viewModel.isLoading.collectAsState().value
    val budgetData = viewModel.budgetData.collectAsState().value
    if (isLoading) {
        LoadingScreen()
    } else {
        BudgetContent(budgetData)
    }
}
// File: feature_budget/src/main/java/com/openparty/feature_budget/presentation/BudgetViewModel.kt
package com.openparty.app.feature_budget.presentation

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.openparty.app.feature_budget.domain.model.BudgetItem
import com.openparty.app.feature_budget.domain.usecase.GetBudgetDataUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class BudgetViewModel @Inject constructor(
    private val getBudgetDataUseCase: GetBudgetDataUseCase
) : ViewModel() {

    private val _budgetData = MutableStateFlow<List<BudgetItem>>(emptyList())
    val budgetData: StateFlow<List<BudgetItem>> = _budgetData.asStateFlow()

    private val _isLoading = MutableStateFlow(true)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()

    init {
        viewModelScope.launch {
            val startTime = System.currentTimeMillis()
            val data = getBudgetDataUseCase()
            _budgetData.value = data
            val elapsedTime = System.currentTimeMillis() - startTime
            val remainingTime = 1000L - elapsedTime
            if (remainingTime > 0) {
                delay(remainingTime)
            }
            _isLoading.value = false
        }
    }
}
// File: feature_budget/src/main/java/com/openparty/feature_budget/presentation/getColorForItem.kt
package com.openparty.app.feature_budget.presentation

import androidx.compose.ui.graphics.Color
import com.openparty.app.feature_budget.domain.model.BudgetItem
import com.openparty.app.ui.theme.BudgetColors
import com.openparty.app.ui.theme.DefaultColor

private val assignedColors = mutableMapOf<String, Color>()
private var colorIndex = 0

fun getColorForItem(item: BudgetItem): Color {
    assignedColors[item.typeOfSpending]?.let { return it }

    val color = BudgetColors.getOrElse(colorIndex) { DefaultColor }
    assignedColors[item.typeOfSpending] = color

    colorIndex = (colorIndex + 1) % BudgetColors.size
    return color
}
// File: feature_budget/src/main/java/com/openparty/feature_budget/presentation/LoadingScreen.kt
package com.openparty.app.feature_budget.presentation

import androidx.compose.animation.core.*
import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Compost
import androidx.compose.material3.Icon
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.scale
import androidx.compose.ui.unit.dp

@Composable
fun LoadingScreen() {
    val infiniteTransition = rememberInfiniteTransition()
    val scale by infiniteTransition.animateFloat(
        initialValue = 0.8f,
        targetValue = 1.2f,
        animationSpec = infiniteRepeatable(
            animation = tween(500, easing = LinearOutSlowInEasing),
            repeatMode = RepeatMode.Reverse
        )
    )

    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        Icon(
            imageVector = Icons.Default.Compost,
            contentDescription = "Loading",
            modifier = Modifier
                .size(64.dp)
                .scale(scale)
        )
    }
}
package com.openparty.app.navigation

import androidx.compose.runtime.Composable
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import com.openparty.app.feature_budget.presentation.BudgetScreen
import com.openparty.app.feature_issues.presentation.IssuesScreen
import com.openparty.app.feature_issues.presentation.RaiseIssueScreen
import com.openparty.app.feature_issues.presentation.ViewIssueScreen
import com.openparty.app.feature_newsfeed.presentation.NewsfeedScreen
import com.openparty.app.feature_newsfeed.presentation.NewsfeedItemScreen

@Composable
fun AppNavHost(navController: NavHostController) {
    NavHost(navController, startDestination = Screen.Budget.route) {
        composable(Screen.Budget.route) {
            BudgetScreen()
        }
        composable(Screen.Issues.route) {
            IssuesScreen(navController)
        }
        composable("view_issue") {
            ViewIssueScreen(navController)
        }
        composable("raise_issue") {
            RaiseIssueScreen(navController)
        }
        composable(Screen.Newsfeed.route) {
            NewsfeedScreen(navController)
        }
        composable("newsfeed_item") {
            NewsfeedItemScreen(navController)
        }
    }
}
package com.openparty.app.navigation

import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Article
import androidx.compose.material.icons.filled.BugReport
import androidx.compose.material.icons.filled.Lightbulb
import androidx.compose.material.icons.filled.PieChart
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.navigation.NavHostController
import androidx.navigation.compose.currentBackStackEntryAsState

@Composable
fun BottomNavBar(navController: NavHostController) {
    val items = listOf(
        Screen.Budget,
        Screen.Issues,
        Screen.Newsfeed
    )
    NavigationBar {
        val currentRoute = navController.currentBackStackEntryAsState().value?.destination?.route
        items.forEach { screen ->
            val icon = when (screen) {
                is Screen.Budget -> Icons.Default.PieChart
                is Screen.Issues -> Icons.Default.Lightbulb
                is Screen.Newsfeed -> Icons.Default.Article
            }
            NavigationBarItem(
                icon = { Icon(imageVector = icon, contentDescription = screen.route) },
                label = { Text(screen.route.capitalize()) },
                selected = currentRoute == screen.route,
                onClick = {
                    navController.navigate(screen.route) {
                        popUpTo(navController.graph.startDestinationId) { saveState = true }
                        launchSingleTop = true
                        restoreState = true
                    }
                }
            )
        }
    }
}
package com.openparty.app.navigation

sealed class Screen(val route: String) {
    object Budget : Screen("budget")
    object Issues : Screen("issues")
    object Newsfeed : Screen("newsfeed")
}

package com.openparty.app.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)

val BudgetColors = listOf(
    Color(0xFFDF6868),  // Soft Red
    Color(0xFF6897DF),  // Soft Blue
    Color(0xFFF0C05A),  // Soft Golden Yellow
    Color(0xFF68DF68),  // Soft Green
    Color(0xFFFFA250),  // Soft Orange
    Color(0xFFA068DF),  // Soft Purple
    Color(0xFFDF88B0),  // Soft Pink
    Color(0xFFC79A7A),  // Soft Brown
    Color(0xFF606060),  // Medium Gray (for Black)
    Color(0xFFECECEC)   // Light Gray (for White)
)

val DefaultColor = Color(0xFFBDBDBD)

-------------------------

