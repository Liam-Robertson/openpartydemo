com.openparty.app
├── core
├── di
│   └── BudgetModule.kt
├── feature_budget
│   ├── data
│   │   ├── datasource
│   │   │   └── BudgetDataSource.kt
│   │   └── repository
│   │       └── BudgetRepositoryImpl.kt
│   ├── domain
│   │   ├── model
│   │   │   ├── BudgetItem.kt
│   │   │   └── BudgetResponse.kt
│   │   ├── repository
│   │   │   └── BudgetRepository.kt
│   │   └── usecase
│   │       └── GetBudgetDataUseCase.kt
│   └── presentation
│       ├── components
│       │   ├── BudgetPieChart.kt
│       │   └── Legend.kt
│       ├── BudgetContent.kt
│       ├── BudgetScreen.kt
│       ├── BudgetViewModel.kt
│       └── LoadingScreen.kt
├── feature_proposals
│   └── presentation
│       └── ProposalsScreen.kt
├── feature_newsfeed
│   └── presentation
│       └── NewsfeedScreen.kt
├── navigation
│   ├── AppNavHost.kt
│   ├── BottomNavBar.kt
│   └── Screen.kt
├── ui
│   └── theme
│       ├── Color.kt
│       ├── Theme.kt
│       └── Type.kt
├── MainActivity.kt
└── MyApplication.kt

---------------------------------

package com.openparty.app.di

import com.openparty.app.feature_issues.data.datasource.IssueDataSource
import com.openparty.app.feature_issues.data.repository.IssueRepositoryImpl
import com.openparty.app.feature_issues.domain.repository.IssueRepository
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object IssueModule {

    @Provides
    @Singleton
    fun provideIssueRepository(
        dataSource: IssueDataSource
    ): IssueRepository = IssueRepositoryImpl(dataSource)
}// File: feature_issues/src/main/java/com/openparty/feature_issues/data/datasource/IssueDataSource.kt
package com.openparty.app.feature_issues.data.datasource

import android.content.Context
import com.openparty.app.feature_issues.domain.model.Issue
import com.openparty.app.feature_issues.domain.model.IssueResponse
import dagger.hilt.android.qualifiers.ApplicationContext
import javax.inject.Inject
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import kotlinx.serialization.json.Json

class IssueDataSource @Inject constructor(
    @ApplicationContext private val context: Context
) {
    private val jsonFormat = Json { ignoreUnknownKeys = true }

    suspend fun fetchIssues(): List<Issue> {
        val jsonString = withContext(Dispatchers.IO) {
            context.assets.open("issueScreen/issues.json").bufferedReader().use { it.readText() }
        }
        val response = jsonFormat.decodeFromString<IssueResponse>(jsonString)
        return response.issues
    }
}
// File: feature_issues/src/main/java/com/openparty/feature_issues/data/repository/IssueRepositoryImpl.kt
package com.openparty.app.feature_issues.data.repository

import com.openparty.app.feature_issues.data.datasource.IssueDataSource
import com.openparty.app.feature_issues.domain.model.Issue
import com.openparty.app.feature_issues.domain.repository.IssueRepository
import javax.inject.Inject

class IssueRepositoryImpl @Inject constructor(
    private val dataSource: IssueDataSource
) : IssueRepository {
    override suspend fun getIssues(): List<Issue> {
        return dataSource.fetchIssues()
    }
}
package com.openparty.app.feature_issues.domain.model

import kotlinx.serialization.Serializable

@Serializable
data class Comment(
    val id: Int,
    val text: String,
    val author: String,
    val upvotes: Int
)package com.openparty.app.feature_issues.domain.model

import kotlinx.serialization.Serializable

@Serializable
data class Issue(
    val id: Int,
    val title: String,
    val summary: String,
    val author: String,
    val upvotes: Int,
    val comments: List<Comment> = emptyList()
)package com.openparty.app.feature_issues.domain.model

import kotlinx.serialization.Serializable

@Serializable
data class IssueResponse(
    val issues: List<Issue>
)// File: feature_issues/src/main/java/com/openparty/feature_issues/domain/repository/IssueRepository.kt
package com.openparty.app.feature_issues.domain.repository

import com.openparty.app.feature_issues.domain.model.Issue

interface IssueRepository {
    suspend fun getIssues(): List<Issue>
}
// File: feature_issues/src/main/java/com/openparty/feature_issues/domain/usecase/GetIssuesUseCase.kt
package com.openparty.app.feature_issues.domain.usecase

import com.openparty.app.feature_issues.domain.model.Issue
import com.openparty.app.feature_issues.domain.repository.IssueRepository
import javax.inject.Inject

class GetIssuesUseCase @Inject constructor(
    private val repository: IssueRepository
) {
    suspend operator fun invoke(): List<Issue> {
        return repository.getIssues()
    }
}
// File: feature_issues/src/main/java/com/openparty/feature_issues/presentation/IssuesContent.kt
package com.openparty.app.feature_issues.presentation

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.ThumbUp
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.openparty.app.feature_issues.domain.model.Issue

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun IssuesContent(
    issues: List<Issue>,
    onIssueClick: (Issue) -> Unit,
    onAddIssueClick: () -> Unit
) {
    Scaffold(
        floatingActionButton = {
            FloatingActionButton(onClick = onAddIssueClick) {
                Icon(imageVector = Icons.Default.Add, contentDescription = "Add Issue")
            }
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            Text(
                text = "Issues",
                style = MaterialTheme.typography.headlineSmall,
                modifier = Modifier.padding(16.dp)
            )
            LazyColumn {
                items(issues.size) { index ->
                    val issue = issues[index]
                    IssueCard(issue, onIssueClick)
                }
            }
        }
    }
}

@Composable
fun IssueCard(issue: Issue, onIssueClick: (Issue) -> Unit) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp)
            .clickable { onIssueClick(issue) }
    ) {
        Row(
            modifier = Modifier.padding(16.dp),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Text(text = issue.title, style = MaterialTheme.typography.bodyLarge)
            Row(verticalAlignment = Alignment.CenterVertically) {
                Icon(imageVector = Icons.Default.ThumbUp, contentDescription = "Upvotes")
                Text(text = issue.upvotes.toString())
            }
        }
    }
}
// File: feature_issues/src/main/java/com/openparty/feature_issues/presentation/IssuesScreen.kt
package com.openparty.app.feature_issues.presentation

import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavController

@Composable
fun IssuesScreen(
    navController: NavController,
    viewModel: IssuesViewModel = hiltViewModel()
) {
    val issues = viewModel.issues.collectAsState().value
    IssuesContent(
        issues = issues,
        onIssueClick = { issue ->
            navController.currentBackStackEntry?.savedStateHandle?.set("issue", issue)
            navController.navigate("view_issue")
        },
        onAddIssueClick = {
            navController.navigate("raise_issue")
        }
    )
}
// File: feature_issues/src/main/java/com/openparty/feature_issues/presentation/IssuesViewModel.kt
package com.openparty.app.feature_issues.presentation

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.openparty.app.feature_issues.domain.model.Issue
import com.openparty.app.feature_issues.domain.usecase.GetIssuesUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class IssuesViewModel @Inject constructor(
    private val getIssuesUseCase: GetIssuesUseCase
) : ViewModel() {

    private val _issues = MutableStateFlow<List<Issue>>(emptyList())
    val issues: StateFlow<List<Issue>> = _issues.asStateFlow()

    init {
        viewModelScope.launch {
            val data = getIssuesUseCase()
            _issues.value = data.sortedByDescending { it.upvotes }
        }
    }
}
// File: feature_issues/src/main/java/com/openparty/feature_issues/presentation/RaiseIssueScreen.kt
package com.openparty.app.feature_issues.presentation

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun RaiseIssueScreen(navController: NavController) {
    var text by remember { mutableStateOf("") }
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text(
            text = "Raise An Issue",
            style = MaterialTheme.typography.headlineSmall
        )
        Spacer(modifier = Modifier.height(16.dp))
        OutlinedTextField(
            value = text,
            onValueChange = { text = it },
            label = { Text("Describe your issue") },
            modifier = Modifier
                .fillMaxWidth()
                .weight(1f)
        )
        Spacer(modifier = Modifier.height(16.dp))
        Button(
            onClick = {
                // Handle submission (for now, we can just navigate back)
                navController.popBackStack()
            },
            modifier = Modifier.align(Alignment.End)
        ) {
            Text("Submit")
        }
    }
}
// File: feature_issues/src/main/java/com/openparty/feature_issues/presentation/ViewIssueScreen.kt
package com.openparty.app.feature_issues.presentation

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ThumbUp
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.openparty.app.feature_issues.domain.model.Issue

@Composable
fun ViewIssueScreen(
    navController: NavController
) {
    val issue = navController.previousBackStackEntry?.savedStateHandle?.get<Issue>("issue")
    issue?.let {
        IssueDetailContent(issue)
    } ?: run {
        // Handle error or navigate back
    }
}

@Composable
fun IssueDetailContent(issue: Issue) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text(
            text = issue.title,
            style = MaterialTheme.typography.headlineSmall
        )
        Spacer(modifier = Modifier.height(8.dp))
        Text(
            text = issue.summary,
            style = MaterialTheme.typography.bodyLarge
        )
        Spacer(modifier = Modifier.height(8.dp))
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Text(text = "By ${issue.author}")
            Row(verticalAlignment = Alignment.CenterVertically) {
                Icon(imageVector = Icons.Default.ThumbUp, contentDescription = "Upvotes")
                Text(text = issue.upvotes.toString())
            }
        }
        Spacer(modifier = Modifier.height(16.dp))
        Divider()
        Spacer(modifier = Modifier.height(8.dp))
        Text(
            text = "Comments",
            style = MaterialTheme.typography.headlineSmall
        )
        Spacer(modifier = Modifier.height(8.dp))
        LazyColumn {
            items(issue.comments.size) { index ->
                val comment = issue.comments[index]
                CommentCard(comment)
            }
        }
    }
}

@Composable
fun CommentCard(comment: com.openparty.app.feature_issues.domain.model.Comment) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text(text = comment.text)
            Spacer(modifier = Modifier.height(8.dp))
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Text(text = "By ${comment.author}")
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Icon(imageVector = Icons.Default.ThumbUp, contentDescription = "Upvotes")
                    Text(text = comment.upvotes.toString())
                }
            }
        }
    }
}
// File: app/src/main/java/com/openparty/app/navigation/AppNavHost.kt
package com.openparty.app.navigation

import androidx.compose.runtime.Composable
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import com.openparty.app.feature_budget.presentation.BudgetScreen
import com.openparty.app.feature_issues.presentation.IssuesScreen
import com.openparty.app.feature_issues.presentation.RaiseIssueScreen
import com.openparty.app.feature_issues.presentation.ViewIssueScreen
import com.openparty.app.feature_newsfeed.presentation.NewsfeedScreen

@Composable
fun AppNavHost(navController: NavHostController) {
    NavHost(navController, startDestination = Screen.Budget.route) {
        composable(Screen.Budget.route) {
            BudgetScreen()
        }
        composable(Screen.Issues.route) {
            IssuesScreen(navController)
        }
        composable("view_issue") {
            ViewIssueScreen(navController)
        }
        composable("raise_issue") {
            RaiseIssueScreen(navController)
        }
        composable(Screen.Newsfeed.route) {
            NewsfeedScreen()
        }
    }
}
// File: app/src/main/java/com/openparty/app/navigation/BottomNavBar.kt
package com.openparty.app.navigation

import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Article
import androidx.compose.material.icons.filled.BugReport // Changed icon
import androidx.compose.material.icons.filled.PieChart
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.navigation.NavHostController
import androidx.navigation.compose.currentBackStackEntryAsState

@Composable
fun BottomNavBar(navController: NavHostController) {
    val items = listOf(
        Screen.Budget,
        Screen.Issues,
        Screen.Newsfeed
    )
    NavigationBar {
        val currentRoute = navController.currentBackStackEntryAsState().value?.destination?.route
        items.forEach { screen ->
            val icon = when (screen) {
                is Screen.Budget -> Icons.Default.PieChart
                is Screen.Issues -> Icons.Default.BugReport
                is Screen.Newsfeed -> Icons.Default.Article
            }
            NavigationBarItem(
                icon = { Icon(imageVector = icon, contentDescription = screen.route) },
                label = { Text(screen.route.capitalize()) },
                selected = currentRoute == screen.route,
                onClick = {
                    navController.navigate(screen.route) {
                        popUpTo(navController.graph.startDestinationId) { saveState = true }
                        launchSingleTop = true
                        restoreState = true
                    }
                }
            )
        }
    }
}
// File: navigation/src/main/java/com/openparty/navigation/Screen.kt
package com.openparty.app.navigation

sealed class Screen(val route: String) {
    object Budget : Screen("budget")
    object Issues : Screen("issues")
    object Newsfeed : Screen("newsfeed")
}
// File: app/src/main/java/com/openparty/app/MainActivity.kt
package com.openparty.app

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.navigation.compose.rememberNavController
import com.openparty.app.navigation.AppNavHost
import com.openparty.app.navigation.BottomNavBar
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            OpenPartyApp()
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun OpenPartyApp() {
    val navController = rememberNavController()
    Scaffold(
        bottomBar = { BottomNavBar(navController) }
    ) { paddingValues ->
        Box(modifier = Modifier.padding(paddingValues)) {
            AppNavHost(navController)
        }
    }
}
// File: app/src/main/java/com/openparty/app/MyApplication.kt
package com.openparty.app

import android.app.Application
import dagger.hilt.android.HiltAndroidApp

@HiltAndroidApp
class MyApplication : Application()

-------------------

Raise Issue Screen:
- The issue screen allows users to raise issues about the local area that will be seen by the councillors and other consistuents 
- It also allows the user to see all the issues raised by other users 

What the Raise Issues screen will look like: 
- The user clicks on the issue icon in the footer to go to the issues screen
- There is a title in the top left that says "Issues" 
- Under that there are cards, each containing a issue 
    - The card has a title on it that says what the issue is 
    - It also has a thumbs up icon which shows how many upvotes the issue has 
    - Issues are ranked by upvotes, so the issues with the most upvotes will be shown at the top of the page and the less upvotes will be shown further down 
    - If a user clicks on a card, it navigates to the View Issue Screen
- Near the bottom of the screen, centred horizontally, would be a big + button
    - This button would be circular with a plus inside it 
    - A user would click the button to navigate to the Raise Issue Screen 
- The bottom of the screen shows the navigation footer with the budget icon, issues icon and newsfeed icon 
- When the user is on the issues screen, the issues icon will be the one that's highlighted 

What the View Issue Screen will look like: 
- The view issue screen allows the user to see a specific issue in more detail
- It has a title which is the name of the issue 
- It has a Summary of the issue which is written by the user. It states what the issue the user is raising is 
    - For example, the user might be raising an issue about long wait list for social housing 
    - They would write a summary of their problem 
- At the bottom of the summary on the left hand side, it shows the name of the user who raised the issue
- At the bottom of the summary on the right hand side, it shows how many upvotes the issue has 
- Under the summary, there is a comments section where other users can reply to the the issue 
- Each comment has text saying what the comment is
    - On the left bottom of the comment it says the name of the user who raised it 
    - On the right bottom of the comment it says the number of upvotes for the comment 

What the Raise Issue Screen would look like: 
- In the top left, there is a title that says "Raise An Issue" 
- In the centre of the screen, there is a text box where a user can input text they want to submit 
- There is also a submit button

Data: 
- In future this system will use a database to store all of it's data
- However this is just a version 1 so right now all of the data is hardcoded in json 
- The data will be stored in app/assets/issueScreen

-------------

I've given you the code for my feature_issues feature and the description of how it should work. 

Now I need dummy data for this 

The data is descibed here: 
Data: 
- In future this system will use a database to store all of it's data
- However this is just a version 1 so right now all of the data is hardcoded in json 
- The data will be stored in app/assets/issueScreen

What the issues data should look like: 
- Stored in json 
- Each issue should have: a title, content, number of upvote, a user, a tag 
- The user is the user who submitted the issue
- The tag is the area of spending of the issue. For example if the issue relates to social housing then the tag would be "housing" 

What the comment data should look like: 
- Stored in json 
- Each comment should have: Content, user, number of upvotes 
- The content is the text that the user wrote in the comment 
- The user is the user who submitted it
- The number of upvotes is the number of times other users have upvoted the comment

----

Give me dummy data that matches this. 

The dummy data about the issue raised should be based on this: 

A common example of an issue a constituent might raise with their local MP could be:

### **Housing Concerns and Social Housing Availability**

A constituent may approach their MP regarding difficulties finding suitable social housing in their area. They might explain that they've been on the council housing waiting list for a long time and are facing overcrowded or unsuitable living conditions. They may also be concerned about rising rental costs, lack of available affordable housing, or deteriorating conditions in their current accommodation due to delayed repairs or maintenance issues.

### **Example Problem Raised by the Constituent**  
> "I've been on the waiting list for social housing for three years now, and my family and I are still living in a small one-bedroom flat despite having two young children. We simply don't have enough space, and the private rental costs in our area are too high for us to move. I've contacted the council numerous times, but nothing seems to change. Can you help us get a priority status or find out why the waiting times are so long? Also, what are you doing to address the overall housing shortage in our area?"

### **Possible MP Actions**
The MP might:
1. Write to the local council's housing department on behalf of the constituent, urging them to reassess the case.
2. Raise the issue in Parliament or in a committee if it's a widespread problem, calling for increased investment in social housing.
3. Hold a meeting with the council and housing associations to discuss improving housing availability and addressing maintenance delays.

Local MPs often act as intermediaries, helping constituents navigate complex systems and highlighting local issues on a national stage.