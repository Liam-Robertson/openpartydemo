com.openparty.app
├── core
├── di
│   └── BudgetModule.kt
├── feature_budget
│   ├── data
│   │   ├── datasource
│   │   │   └── BudgetDataSource.kt
│   │   └── repository
│   │       └── BudgetRepositoryImpl.kt
│   ├── domain
│   │   ├── model
│   │   │   ├── BudgetItem.kt
│   │   │   └── BudgetResponse.kt
│   │   ├── repository
│   │   │   └── BudgetRepository.kt
│   │   └── usecase
│   │       └── GetBudgetDataUseCase.kt
│   └── presentation
│       ├── components
│       │   ├── BudgetPieChart.kt
│       │   └── Legend.kt
│       ├── BudgetContent.kt
│       ├── BudgetScreen.kt
│       ├── BudgetViewModel.kt
│       └── LoadingScreen.kt
├── feature_proposals
│   └── presentation
│       └── ProposalsScreen.kt
├── feature_newsfeed
│   └── presentation
│       └── NewsfeedScreen.kt
├── navigation
│   ├── AppNavHost.kt
│   ├── BottomNavBar.kt
│   └── Screen.kt
├── ui
│   └── theme
│       ├── Color.kt
│       ├── Theme.kt
│       └── Type.kt
├── MainActivity.kt
└── MyApplication.kt

---------------------------------

Budget Screen:
- The aim of the budget screen is to represent the amount of spending in each area of government in pie chart form
- It gets information about government spending from a json file, calculates the percentage spending in each area, then displays that information to the user in a pie chart#
  - The json data file is stored in the file path: app/assets
  - I have included an example of what the json data will look like at the bottom 
- The budget screen has three parts:
    - A title saying "West Lothian Budget"
    - A pie chart. This has a legend showing what each section corresponds to
    - A footer:
        - The footer is used for navigation
        - It is made up of three sections - a budget section, a newsfeed section and a proposals section
        - Each section is represented by an icon
        - When the user clicks on a section, it navigates to that page
        - When the app is first opens, it defaults navigation to the budget section
        - When the budget screen is open, the budget section is highlighted. When the minutes screen is open, the minutes section is highlighted

When the user enters the budget screen this happens:
- The data about the financial report is fetched from the json file
    - In future, this data will be stored in a table but since this is a version 1 it's hardcoded in a json file 
- The percentage cost of each area of level 1 spending is calculated
  - For example, if Education costs £10 million, and the total cost is £100 million, then education is 10% 
- If an area of spending is less than 5% of total spending, it is grouped into a Miscellaneous category 
- The pie chart is then populated with the data
  - It will show all areas of spending greater than 5% such as Education or Social Services, and it will also show a miscellaneous category (which represents everything under 5%)
  - The pie chart is populated using data only from level 1 of spending at this point, not from level 2 or level 3 spending
  - The pie chart shows each section of spending proportionally to it's percentage of overall spending 
    - For example, if education spending was 22% of total spending, it would take up 22% of the overall pie chart 
- There will be a legend at the bottom of the screen which shows each area of spending, it's cost and it's colour on the pie chart
- If the user clicks on a section in the legend, the app shows a new pie chart which gives a more detailed breakdown of that type of spending
  - For example if the user clicks on Education Services in the legend, it shows the user a new title, pie chart and legend
    - This time, the title would be the level 1 spending, the pie chart and legend would show all the level 2 spending inside the level 1 spending 
    - For example, if the user clicks Social Care Services in the legend, then a screen is shown where the title is Social Care Services, and the pie chart and legend have Adult and Elderly Services (IJB), Children's Services (Non-IJB)
    - There is also a back button at the top left of the page which takes the user back to the level 1 spending diagram 
- The same applies for level 3 of spending i.e. if the user clicks a section of level 2 spending in the legend, it will take them to level 3 spending diagram 
  - For example, if the user clicked Housing Revenue Account (HRA), it would show a screen where the title is Housing Revenue Account (HRA), and the pie chart and legend show Repairs and Maintenance, Supervision and Management etc

---------------------------------

{
  "areas_of_spending": [
    {
      "spending_level_1": {
        "type_of_spending": "Education Services",
        "cost": "£220.806 million",
        "summary": "This category encompasses all spending related to educational services provided by the council, including staffing costs for teachers and support staff, educational materials, school maintenance, and administrative support.",
        "spending_level_2": [
          {
            "type_of_spending": "Schools and Education Support",
            "cost": "£220.806 million",
            "summary": "This subtype includes costs for teaching staff salaries, educational materials, school facility maintenance, special education needs, and administrative support services.",
            "spending_level_3": [
              {
                "type_of_spending": "Early Learning and Childcare",
                "cost": "£17.850 million",
                "summary": "Provision of early childhood education and childcare services for children under the age of five."
              },
              {
                "type_of_spending": "Pupil Equity Funding",
                "cost": "£5.449 million",
                "summary": "Additional funding allocated directly to schools to reduce the poverty-related attainment gap."
              },
              {
                "type_of_spending": "Gaelic Education",
                "cost": "£0.006 million",
                "summary": "Supports Gaelic language education within the council area."
              },
              {
                "type_of_spending": "Scottish Attainment Challenge",
                "cost": "£0.762 million",
                "summary": "National program aimed at improving educational outcomes in areas of deprivation."
              }
            ]
          }
        ]
      }
    },
    {
      "spending_level_1": {
        "type_of_spending": "Social Care Services",
        "cost": "£257.899 million",
        "summary": "Includes all expenditures related to the well-being of residents requiring assistance due to age, disability, or other factors.",
        "spending_level_2": [
          {
            "type_of_spending": "Adult and Elderly Services (IJB)",
            "cost": "£207.377 million",
            "summary": "Services for adults and the elderly, including healthcare integration with the West Lothian Integration Joint Board (IJB).",
            "spending_level_3": []
          },
          {
            "type_of_spending": "Children's Services (Non-IJB)",
            "cost": "£50.522 million",
            "summary": "Child protection services, foster care, adoption services, and youth support programs.",
            "spending_level_3": []
          }
        ]
      }
    },
    {
      "spending_level_1": {
        "type_of_spending": "Housing Services",
        "cost": "£99.621 million",
        "summary": "Covers all costs associated with the provision and maintenance of council housing, including management of housing stock and support services for tenants.",
        "spending_level_2": [
          {
            "type_of_spending": "Housing, Customer, and Building Services",
            "cost": "£23.672 million",
            "summary": "Management and support of housing services, customer service centers, and building maintenance.",
            "spending_level_3": []
          },
          {
            "type_of_spending": "Housing Revenue Account (HRA)",
            "cost": "£75.949 million",
            "summary": "Includes repairs and maintenance, supervision and management, depreciation of housing assets, and other housing-related costs.",
            "spending_level_3": [
              {
                "type_of_spending": "Repairs and Maintenance",
                "cost": "£24.555 million",
                "summary": "Routine and emergency repairs to council housing stock."
              },
              {
                "type_of_spending": "Supervision and Management",
                "cost": "£9.045 million",
                "summary": "Administrative costs associated with managing council housing."
              },
              {
                "type_of_spending": "Depreciation and Impairment",
                "cost": "£38.143 million",
                "summary": "Accounting charges reflecting the consumption of housing assets."
              },
              {
                "type_of_spending": "Bad Debt Provision",
                "cost": "£1.112 million",
                "summary": "Funds set aside to cover potential losses from unpaid rent."
              },
              {
                "type_of_spending": "Other Expenditure",
                "cost": "£3.094 million",
                "summary": "Miscellaneous costs related to housing services."
              }
            ]
          }
        ]
      }
    },
    {
      "spending_level_1": {
        "type_of_spending": "Environmental and Operational Services",
        "cost": "£92.841 million",
        "summary": "Expenditures related to the upkeep of the local environment and essential operational services.",
        "spending_level_2": [
          {
            "type_of_spending": "Operational Services",
            "cost": "£92.841 million",
            "summary": "Includes waste disposal, recycling services, street cleaning, road maintenance, parks and open spaces, and environmental health services.",
            "spending_level_3": []
          }
        ]
      }
    },
    {
      "spending_level_1": {
        "type_of_spending": "Corporate and Central Services",
        "cost": "£134.487 million",
        "summary": "Central administrative functions that support the operations of the council, including executive management and support services.",
        "spending_level_2": [
          {
            "type_of_spending": "Chief Executive, Finance, and Property Services",
            "cost": "£132.021 million",
            "summary": "Corporate management, financial services, property management, legal services, and human resources.",
            "spending_level_3": []
          },
          {
            "type_of_spending": "Corporate Services",
            "cost": "£2.466 million",
            "summary": "Support services including IT and communications.",
            "spending_level_3": []
          }
        ]
      }
    },
    {
      "spending_level_1": {
        "type_of_spending": "Other Services",
        "cost": "£45.371 million",
        "summary": "Various services essential for community support and development.",
        "spending_level_2": [
          {
            "type_of_spending": "Miscellaneous Services",
            "cost": "£45.371 million",
            "summary": "May include community development projects, economic initiatives, and support for voluntary organizations.",
            "spending_level_3": []
          }
        ]
      }
    },
    {
      "spending_level_1": {
        "type_of_spending": "Planning and Economic Development",
        "cost": "£15.602 million",
        "summary": "Expenditures aimed at planning and facilitating economic growth within the council area.",
        "spending_level_2": [
          {
            "type_of_spending": "Planning, Economic Development, and Regeneration",
            "cost": "£15.602 million",
            "summary": "Urban planning, building control, economic regeneration projects, and support for local businesses.",
            "spending_level_3": []
          }
        ]
      }
    },
    {
      "spending_level_1": {
        "type_of_spending": "Culture, Leisure, and Recreation",
        "cost": "£13.351 million",
        "summary": "Funding for cultural activities, recreational facilities, and leisure services to enhance the quality of life for residents.",
        "spending_level_2": [
          {
            "type_of_spending": "West Lothian Leisure Ltd.",
            "cost": "£13.351 million",
            "summary": "Operation of leisure centers, sports facilities, swimming pools, and recreational programs.",
            "spending_level_3": []
          }
        ]
      }
    },
    {
      "spending_level_1": {
        "type_of_spending": "Trading Operations",
        "cost": "£2.940 million",
        "summary": "Costs associated with the council's trading activities, primarily focusing on property management for economic development.",
        "spending_level_2": [
          {
            "type_of_spending": "Economic Development Properties",
            "cost": "£2.940 million",
            "summary": "Management and leasing of industrial units, offices, and shops to support local businesses.",
            "spending_level_3": []
          }
        ]
      }
    },
    {
      "spending_level_1": {
        "type_of_spending": "Miscellaneous Expenditures",
        "cost": "£2.800 million",
        "summary": "Minor expenditures not significant enough to warrant individual categories.",
        "spending_level_2": [
          {
            "type_of_spending": "Local Bus Services Subsidies",
            "cost": "£0.566 million",
            "summary": "Expenditures to subsidize local bus services."
          },
          {
            "type_of_spending": "Residential Schools and Social Work Payments",
            "cost": "£0.737 million",
            "summary": "Payments for children placed in residential schools and additional social work-related expenditures."
          },
          {
            "type_of_spending": "Special School Placements",
            "cost": "£0.199 million",
            "summary": "Costs associated with placing children in special schools outside the council area."
          },
          {
            "type_of_spending": "Other Services",
            "cost": "£1.298 million",
            "summary": "Various minor services and expenditures not significant enough for separate categorization."
          }
        ]
      }
    }
  ]
}

--------------------

// File: feature-budget/src/main/java/com/openparty/feature_budget/di/BudgetModule.kt
package com.openparty.app.di

import com.openparty.app.feature_budget.data.datasource.BudgetDataSource
import com.openparty.app.feature_budget.data.repository.BudgetRepositoryImpl
import com.openparty.app.feature_budget.domain.repository.BudgetRepository
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object BudgetModule {

    @Provides
    @Singleton
    fun provideBudgetRepository(
        dataSource: BudgetDataSource
    ): BudgetRepository = BudgetRepositoryImpl(dataSource)
}
package com.openparty.app.feature_budget.data.datasource

import android.content.Context
import com.openparty.app.feature_budget.domain.model.BudgetItem
import com.openparty.app.feature_budget.domain.model.BudgetResponse
import com.openparty.app.feature_budget.domain.model.SpendingLevel1
import dagger.hilt.android.qualifiers.ApplicationContext
import javax.inject.Inject
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import kotlinx.serialization.decodeFromString
import kotlinx.serialization.json.Json

class BudgetDataSource @Inject constructor(
    @ApplicationContext private val context: Context
) {
    private val jsonFormat = Json { ignoreUnknownKeys = true }

    suspend fun fetchBudgetData(): List<BudgetItem> {
        val jsonString = withContext(Dispatchers.IO) {
            context.assets.open("financeDataV1.json").bufferedReader().use { it.readText() }
        }
        val response = jsonFormat.decodeFromString<BudgetResponse>(jsonString)
        return response.areasOfSpending.map { it.level1 }
    }
}
// File: feature-budget/src/main/java/com/openparty/feature_budget/data/repository/BudgetRepositoryImpl.kt
package com.openparty.app.feature_budget.data.repository

import com.openparty.app.feature_budget.data.datasource.BudgetDataSource
import com.openparty.app.feature_budget.domain.model.BudgetItem
import com.openparty.app.feature_budget.domain.repository.BudgetRepository
import javax.inject.Inject

class BudgetRepositoryImpl @Inject constructor(
    private val dataSource: BudgetDataSource
) : BudgetRepository {
    override suspend fun getBudgetData(): List<BudgetItem> {
        return dataSource.fetchBudgetData()
    }
}
package com.openparty.app.feature_budget.domain.model

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

@Serializable
data class BudgetItem(
    @SerialName("type_of_spending") val typeOfSpending: String,
    val cost: String,
    val summary: String,
    @SerialName("spending_level_2") val subtypesLevel2: List<BudgetItem> = emptyList(),
    @SerialName("spending_level_3") val subtypesLevel3: List<BudgetItem> = emptyList(),
    val groupedItems: List<BudgetItem>? = null
)
// File: feature-budget/src/main/java/com/openparty/feature_budget/domain/model/BudgetResponse.kt
package com.openparty.app.feature_budget.domain.model

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

@Serializable
data class BudgetResponse(
    @SerialName("areas_of_spending") val areasOfSpending: List<SpendingLevel1>
)package com.openparty.app.feature_budget.domain.model

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

@Serializable
data class SpendingLevel1(
    @SerialName("spending_level_1") val level1: BudgetItem
)// File: feature-budget/src/main/java/com/openparty/feature_budget/domain/repository/BudgetRepository.kt
package com.openparty.app.feature_budget.domain.repository

import com.openparty.app.feature_budget.domain.model.BudgetItem

interface BudgetRepository {
    suspend fun getBudgetData(): List<BudgetItem>
}
// File: feature-budget/src/main/java/com/openparty/feature_budget/domain/usecase/GetBudgetDataUseCase.kt
package com.openparty.app.feature_budget.domain.usecase

import com.openparty.app.feature_budget.domain.model.BudgetItem
import com.openparty.app.feature_budget.domain.repository.BudgetRepository
import javax.inject.Inject

class GetBudgetDataUseCase @Inject constructor(
    private val repository: BudgetRepository
) {
    suspend operator fun invoke(): List<BudgetItem> = repository.getBudgetData()
}
// File: feature-budget/src/main/java/com/openparty/feature_budget/presentation/components/Legend.kt
package com.openparty.app.feature_budget.presentation.components

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.background
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.openparty.app.feature_budget.domain.model.BudgetItem
import com.openparty.app.feature_budget.presentation.getColorForItem

@Composable
fun Legend(
    budgetItems: List<BudgetItem>,
    onItemClick: (BudgetItem) -> Unit
) {
    Column {
        budgetItems.forEach { item ->
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable { onItemClick(item) }
                    .padding(8.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(16.dp)
                        .background(color = getColorForItem(item))
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(
                    text = "${item.typeOfSpending} - ${item.cost}",
                    style = MaterialTheme.typography.bodyMedium
                )
            }
        }
    }
}
// File: feature_budget/src/main/java/com/openparty/feature_budget/presentation/BudgetContent.kt
package com.openparty.app.feature_budget.presentation

import androidx.compose.foundation.layout.*
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.openparty.app.feature_budget.domain.model.BudgetItem
import com.openparty.app.feature_budget.presentation.components.BudgetPieChart
import com.openparty.app.feature_budget.presentation.components.Legend

import androidx.compose.material3.Button

@Composable
fun BudgetContent(budgetItems: List<BudgetItem>) {
    var currentItems by remember(budgetItems) { mutableStateOf(groupSmallBudgetItems(budgetItems)) }
    val navigationStack = remember { mutableStateListOf<List<BudgetItem>>() }

    Column(
        modifier = Modifier.fillMaxSize().padding(16.dp)
    ) {
        Text(
            text = "West Lothian Budget",
            style = MaterialTheme.typography.headlineSmall,
            modifier = Modifier.align(Alignment.Start)
        )

        if (navigationStack.isNotEmpty()) {
            Button(
                onClick = {
                    if (navigationStack.isNotEmpty()) {
                        currentItems = navigationStack.removeLast()
                    }
                },
                modifier = Modifier.padding(vertical = 16.dp)
            ) {
                Text("Back")
            }
        }

        Spacer(modifier = Modifier.height(32.dp))

        Box(
            modifier = Modifier.fillMaxWidth(),
            contentAlignment = Alignment.Center
        ) {
            BudgetPieChart(
                budgetItems = currentItems,
                onItemClick = { selectedItem ->
                    val nextLevelItems = when {
                        selectedItem.subtypesLevel2.isNotEmpty() -> groupSmallBudgetItems(selectedItem.subtypesLevel2)
                        selectedItem.subtypesLevel3.isNotEmpty() -> groupSmallBudgetItems(selectedItem.subtypesLevel3)
                        else -> listOf(selectedItem)
                    }

                    if (nextLevelItems != currentItems) {
                        navigationStack.add(currentItems)
                        currentItems = nextLevelItems
                    }
                }
            )
        }

        Spacer(modifier = Modifier.height(32.dp))

        Legend(
            budgetItems = currentItems,
            onItemClick = { selectedItem ->
                val nextLevelItems = when {
                    selectedItem.subtypesLevel2.isNotEmpty() -> groupSmallBudgetItems(selectedItem.subtypesLevel2)
                    selectedItem.subtypesLevel3.isNotEmpty() -> groupSmallBudgetItems(selectedItem.subtypesLevel3)
                    else -> listOf(selectedItem)
                }

                if (nextLevelItems != currentItems) {
                    navigationStack.add(currentItems)
                    currentItems = nextLevelItems
                }
            }
        )
    }
}

fun groupSmallBudgetItems(budgetItems: List<BudgetItem>): List<BudgetItem> {
    val totalCost = budgetItems.sumOf { parseCost(it.cost) }
    val threshold = totalCost * 0.05

    val (largeItems, smallItems) = budgetItems.partition { parseCost(it.cost) >= threshold }

    return if (smallItems.isNotEmpty()) {
        val miscellaneousCost = smallItems.sumOf { parseCost(it.cost) }
        largeItems + BudgetItem(
            typeOfSpending = "Miscellaneous",
            cost = formatCost(miscellaneousCost),
            summary = "Grouped small items",
            groupedItems = smallItems
        )
    } else {
        budgetItems
    }
}

fun parseCost(costString: String): Double {
    return costString
        .replace("£", "")
        .replace(",", "")
        .replace(" million", "")
        .trim()
        .toDoubleOrNull() ?: 0.0
}

fun formatCost(cost: Double): String {
    return "£${"%.3f".format(cost)} million"
}
// File: feature_budget/src/main/java/com/openparty/feature_budget/presentation/components/BudgetPieChart.kt
package com.openparty.app.feature_budget.presentation.components

import androidx.compose.foundation.layout.size
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import me.bytebeats.views.charts.pie.PieChart
import me.bytebeats.views.charts.pie.PieChartData
import me.bytebeats.views.charts.pie.render.SimpleSliceDrawer
import com.openparty.app.feature_budget.domain.model.BudgetItem
import com.openparty.app.feature_budget.presentation.getColorForItem
import com.openparty.app.feature_budget.presentation.parseCost

@Composable
fun BudgetPieChart(
    budgetItems: List<BudgetItem>,
    onItemClick: (BudgetItem) -> Unit
) {
    val pieSlices = budgetItems.mapNotNull { item ->
        val value = parseCost(item.cost).toFloat()

        PieChartData.Slice(
            value = value,
            color = getColorForItem(item)
        )
    }

    PieChart(
        pieChartData = PieChartData(pieSlices),
        modifier = Modifier.size(200.dp),
        sliceDrawer = SimpleSliceDrawer(sliceThickness = 50f)
    )
}
// File: feature_budget/src/main/java/com/openparty/feature_budget/presentation/BudgetScreen.kt
package com.openparty.app.feature_budget.presentation

import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.hilt.navigation.compose.hiltViewModel

@Composable
fun BudgetScreen(
    viewModel: BudgetViewModel = hiltViewModel()
) {
    val isLoading = viewModel.isLoading.collectAsState().value
    val budgetData = viewModel.budgetData.collectAsState().value
    if (isLoading) {
        LoadingScreen()
    } else {
        BudgetContent(budgetData)
    }
}
// File: feature_budget/src/main/java/com/openparty/feature_budget/presentation/BudgetViewModel.kt
package com.openparty.app.feature_budget.presentation

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.openparty.app.feature_budget.domain.model.BudgetItem
import com.openparty.app.feature_budget.domain.usecase.GetBudgetDataUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class BudgetViewModel @Inject constructor(
    private val getBudgetDataUseCase: GetBudgetDataUseCase
) : ViewModel() {

    private val _budgetData = MutableStateFlow<List<BudgetItem>>(emptyList())
    val budgetData: StateFlow<List<BudgetItem>> = _budgetData.asStateFlow()

    private val _isLoading = MutableStateFlow(true)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()

    init {
        viewModelScope.launch {
            val startTime = System.currentTimeMillis()
            val data = getBudgetDataUseCase()
            _budgetData.value = data
            val elapsedTime = System.currentTimeMillis() - startTime
            val remainingTime = 1000L - elapsedTime
            if (remainingTime > 0) {
                delay(remainingTime)
            }
            _isLoading.value = false
        }
    }
}
// File: feature_budget/src/main/java/com/openparty/feature_budget/presentation/getColorForItem.kt
package com.openparty.app.feature_budget.presentation

import androidx.compose.ui.graphics.Color
import com.openparty.app.feature_budget.domain.model.BudgetItem

fun getColorForItem(item: BudgetItem): Color {
    return when (item.typeOfSpending) {
        "Housing Services" -> Color(0xFF42A5F5)
        "Transportation Services" -> Color(0xFFFFA726)
        "Education Services" -> Color(0xFF66BB6A)
        "Social Care Services" -> Color(0xFFAB47BC)
        "Healthcare Services" -> Color(0xFFEF5350)
        "Miscellaneous" -> Color(0xFF9E9E9E)
        else -> Color(0xFF9E9E9E)
    }
}
// File: feature_budget/src/main/java/com/openparty/feature_budget/presentation/LoadingScreen.kt
package com.openparty.app.feature_budget.presentation

import androidx.compose.animation.core.*
import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Compost
import androidx.compose.material3.Icon
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.scale
import androidx.compose.ui.unit.dp

@Composable
fun LoadingScreen() {
    val infiniteTransition = rememberInfiniteTransition()
    val scale by infiniteTransition.animateFloat(
        initialValue = 0.8f,
        targetValue = 1.2f,
        animationSpec = infiniteRepeatable(
            animation = tween(500, easing = LinearOutSlowInEasing),
            repeatMode = RepeatMode.Reverse
        )
    )

    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        Icon(
            imageVector = Icons.Default.Compost,
            contentDescription = "Loading",
            modifier = Modifier
                .size(64.dp)
                .scale(scale)
        )
    }
}
// File: app/src/main/java/com/openparty/app/navigation/AppNavHost.kt
package com.openparty.app.navigation

import androidx.compose.runtime.Composable
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import com.openparty.app.feature_budget.presentation.BudgetScreen
import com.openparty.app.feature_proposals.presentation.ProposalsScreen
import com.openparty.app.feature_newsfeed.presentation.NewsfeedScreen

@Composable
fun AppNavHost(navController: NavHostController) {
    NavHost(navController, startDestination = Screen.Budget.route) {
        composable(Screen.Budget.route) {
            BudgetScreen()
        }
        composable(Screen.Proposals.route) {
            ProposalsScreen()
        }
        composable(Screen.Newsfeed.route) {
            NewsfeedScreen()
        }
    }
}
// File: app/src/main/java/com/openparty/app/navigation/BottomNavBar.kt
package com.openparty.app.navigation

import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Article
import androidx.compose.material.icons.filled.Lightbulb
import androidx.compose.material.icons.filled.PieChart
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.navigation.compose.currentBackStackEntryAsState
import androidx.navigation.NavHostController

@Composable
fun BottomNavBar(navController: NavHostController) {
    val items = listOf(
        Screen.Budget,
        Screen.Proposals,
        Screen.Newsfeed
    )
    NavigationBar {
        val currentRoute = navController.currentBackStackEntryAsState().value?.destination?.route
        items.forEach { screen ->
            val icon: ImageVector = when (screen) {
                is Screen.Budget -> Icons.Default.PieChart
                is Screen.Proposals -> Icons.Default.Lightbulb
                is Screen.Newsfeed -> Icons.Default.Article
            }
            NavigationBarItem(
                icon = { Icon(imageVector = icon, contentDescription = screen.route) },
                label = { Text(screen.route.capitalize()) },
                selected = currentRoute == screen.route,
                onClick = {
                    navController.navigate(screen.route) {
                        popUpTo(navController.graph.startDestinationId) { saveState = true }
                        launchSingleTop = true
                        restoreState = true
                    }
                }
            )
        }
    }
}
// File: navigation/src/main/java/com/openparty/navigation/Screen.kt
package com.openparty.app.navigation

sealed class Screen(val route: String) {
    object Budget : Screen("budget")
    object Proposals : Screen("proposals")
    object Newsfeed : Screen("newsfeed")
}
// File: app/src/main/java/com/openparty/app/MainActivity.kt
package com.openparty.app

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.navigation.compose.rememberNavController
import com.openparty.app.navigation.AppNavHost
import com.openparty.app.navigation.BottomNavBar
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            OpenPartyApp()
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun OpenPartyApp() {
    val navController = rememberNavController()
    Scaffold(
        bottomBar = { BottomNavBar(navController) }
    ) { paddingValues ->
        Box(modifier = Modifier.padding(paddingValues)) {
            AppNavHost(navController)
        }
    }
}
// File: app/src/main/java/com/openparty/app/MyApplication.kt
package com.openparty.app

import android.app.Application
import dagger.hilt.android.HiltAndroidApp

@HiltAndroidApp
class MyApplication : Application()


----------------

